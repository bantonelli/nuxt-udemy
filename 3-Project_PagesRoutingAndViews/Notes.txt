-------------------
MODULE INTRODUCTION 
-------------------
- Course Project will be a complete blog 
    - We will gradually extend the app throughout the course 



-------------------
CREATING THE MAIN SECTIONS/PAGES 
-------------------
MAIN ROUTE FOLDERS: 
    - ABOUT: Static content 
    - ADMIN: Auth related routes and admin panel 
    - POSTS: Blog related content (Actual blog post pages)


-------------------
ADDING EXTERNAL FONTS 
-------------------
- You can add CDN links for fonts in the main .html page.

HOW DO YOU MODIFY THE MAIN HTML PAGE?:
    - You can do this by adding configuration to the nuxt.config file 
    - there is a "head" property in there which we can use to add stylesheets, meta tags, etc. 
        - inside of there is the 'link' property which is an array 
          of link tags that gets inserted. 
        - This is where you can add 3rd party stylesheets 
    - After importing a 3rd party stylesheet you have to declare the 
      font-family one of the layouts, pages, or components 
        - Preferably do this on the default layout so the fonts are 
          more widely accessible. 


-------------------
CREATING THE LANDING PAGE 
-------------------
- Basically just added styles and markup 


-------------------
SPLITTING THE PAGE INTO COMPONENTS 
-------------------
- Set up components as per vanilla VueJS in components/ directory 
- Import them in the pages 
- Use them as you would in vanilla VueJS 


-------------------
ADDING STATIC ASSETS - THE BACKGROUND IMAGE 
-------------------
- For most images we will be using a file-hosting service 
like AmazonS3 
    - In this scenario we would just store the URL to the hosted 
    file in the database. 
	- Then we use that URL to fetch the image 	
	- However how do we store static assets? 

USING STATIC ASSETS: 
- In ~/assets put a folder to store images (can be named anything)
	EXAMPLE: ~/assets/images/myimage.png 
- Then access files in this path in a background-image: url('');: 
			 // Leave off first slash ***** 
	EXAMPLE: background-image: url('~assets/images/myimage.png');



-------------------
ADDING THE HEADER COMPONENT  
-------------------
- Basically just added a normal component that emits an event.
	- You can respond to events in the layout component itself. 



-------------------
VUE ROUTER VS. NUXT ROUTER 
-------------------
- By default nuxt-links add a class to the route currently on. 
- You can then style this class: 'nuxt-link-active'
- The Nuxt router just uses the vue-router behind the scenes 
	- All of the normal properties can be accessed. 



-------------------
WORKING ON THE POST PAGE 
-------------------
- This was mostly about workflow in VueJS and Nuxt
- The goal is to consolidate and modularize components as much 
  as possible, while making everything still make sense in 
  context of the overall app design. 



-------------------
CREATING AN ADMIN SECTION 
-------------------
- In this section we added a form 
- The form allows us to either edit a post or create a new post
  depending on the isAdmin prop.
	- If isAdmin is true we will use the 'edit' version of the 
	  form (populated with post info) 
	  	- Otherwise the form will be blank.



-------------------
IMPROVING THE APP
-------------------
- Added an auth form that can toggle between 'register' and 'login'. 



-------------------
ADDING A SEPARATE LAYOUT TO THE ADMIN AREA 
-------------------
- Create /layouts/admin.vue 
- Include this on all admin pages individually using the 
  'layout' property of the Vue instance. 
- Also added a default error page. (/layouts/error.vue)
****** BE SURE TO USE A REGULAR ANCHOR LINK ON THE ERROR LAYOUT 
	- The nuxt links may not work if you've reached this point. 