-------------------
EXECUTING CODE ON THE SERVER 
-------------------
- Now we want to connect the app to a real data source 
- There are different ways for Nuxt to connect to a backend.
    - The way we are focusing on is where the client app (nuxt)
      has its own server that is separate from a backend. 

NUXT ITSELF IS A SERVER THOUGH: (WHAT DOES THIS MEAN?)
- How can you check if code is running on the server. 
    - Use process.client to see if you are on the server 
    - This is an environment variable provided automatically 
- You shouldn't use nuxtServerInit() and asyncData() as a means 
  to execute server-side code. 
    - These only run 1 time on the server and thus are unreliable for this purpose. 

- CHECKING IF YOU ARE RUNNING ON THE SERVER:
    - You can use the process.client environment variable 
      to see if the code is executing on the client-side. 
    - EXAMPLE: 
        if (!process.client) {
            ...
            // Run some server-side logic 
            ...
        }
**** ASIDE: nuxtServerInit(vuexContext, context)
    - The 'context' argument passed by Nuxt actually contains 
      the request object that was made to the nuxt server 
    - The request object is basically a standard Express request. 
        -> context.req 
        -> context.req.session
    - So once the client refreshes and calls nuxtServerInit, the 
      request made to do so is made available to us. 

- GOALS: 
    - How can we reach out to a separate backend? 
    - We are using the approach where the Nuxt server is hosted 
      separately from the backend. 


-------------------
ADDING FIREBASE AS A BACKEND 
-------------------
- Set up a free firebase project 
- Set up a "realtime database" in test mode with read and write 
  access to true (so its available to everyone).


-------------------
USING FIREBASE TO STORE DATA 
-------------------
- Let's use firebase to store data. 
- In AdminPostForm component 
    - In the onSave() method you should emit an event up to 
      the page/parent component. 
        - We can call the event 'submit'

- In the new-post page 
    - Handle the 'submit' event emitted by the PostForm 
    - The method should be called onSubmitted() 
        - Use Axios to send a POST request to the Firebase backend 
        - The firebase data store will automatically create a 
          resource that has the name of the URL you POST to. 
        - Send the request to /posts.json 
            - The .json is required by Firebase 
    - Console log the result of the request in Promise.then()


-------------------
FETCHING DATA FROM THE BACKEND 
-------------------
- Let's now fetch data from the backend
- The place we currently fetch is in nuxtServerInit()
    - In reality you won't want to fetch all data in one step. 
    - You may want to fetch a slice and then fetch data as the 
      user clicks around. 
- TASK: 
    - replace the dummy data in nuxtServerInit() with an 
      axios.get request that fetches data from Firebase URL 
    - After the request:
        - .then() 
            - take res.data (returned by the request) and commit it 
            into the vuex store. 
            - convert the object into array of keys. 
        - .catch()
            - return error  


-------------------
INITIALIZING OUR STORE 
-------------------
- Basically when we initialized our store with the data we 
  had to make sure that the properties on the fetched objects 
  matched what the templates/components are referencing. 


-------------------
FETCHING ALL POSTS
-------------------
- GOAL: 
  - We want to be able to get just a subset of the data from the backend. 

- SOLUTION: 
  - in the single post page:
    - make a get request to the backend 
    - do this request inside of the asyncData() method 
    - Optimally you want to hit an endpoint that has the ID of the post 
      you wish to fetch. 
    - Get the ID from the route parameter (context.params.id)
    - .then(res)
      - Get back the response and access its data (res.data)
      - return the loadedPost property so it can be rendered by Vue. 
    - .catch(err)
      - Load the error page default with context.error(err)
  - In the Admin New post form: 
    - Add the updatedDate property -> new Date()
    - The form component shouldn't have a new field or anything 
      - Instead the parent should add the property 


-------------------
ASSIGNMENT 3: FETCHING DATA 
-------------------
- Index.vue file in the admin page
    - Connect it to the Vuex store and fetch the postList 
      from there. 
    - Pass the post to the postList component 
- Move on to the PostID page 


-------------------
EDITING POSTS  
-------------------
- We want to add the ability to save updates to the backend 
1) Add a @submit listener to the postId page 
    - This is because the AdminPostForm emits this when you click save 
2) Add a method to the postId page which sends a PUT request 
   to the backend 
    - Put the editedPost data into the request 
    - we can access the postId via --> this.$route.params.postId 
        - This is because we have access to the router at this 
          point in the component lifecycle 
3) After submitting we want to redirect via this.$router.push();
    - The data at this point is out of sync with the store 


-------------------
SYNCHRONIZING VUEX AND THE BACKEND 
-------------------
- If you manipulate data on the backend after the application 
    is initialized --> The store's data becomes out of sync 

POSSIBLE SOLUTIONS: 
1) Do async data calls everywhere to fetch the most up to date data 
2) Manipulate the store directly --> THIS IS GOOD 

MANIPULATING DATA IN THE STORE: MUTATIONS 
    - If you're editing data on the backend you should have a corresponding 
      'edit' mutation and so forth. 
    - APPROACH -> EDIT MUTATION: 
        - Find the post in the state using the editedPost.id 
        - Replace the post object in the state.loadedPosts array 
    - APPROACH -> ADD MUTATION: 
        - Just push the new post onto the array 
    - After defining the mutations, create corresponding actions that are 
      callable in an asynchronous context. 
 
MANIPULATING DATA IN THE STORE: ACTIONS 
    - GENERAL CONCEPTS: 
        - Use actions in the page-level components 
        - Any requests to the backend should be contained within the 
          action whenever applicable 
            - Return the axios request so that you can chain on 
              .then() calls within the page execution context and have 
              access to the $router, data, etc. 
            - When using this approach, redirects can be executed programmatically 
              in the .then() call. 
        - 