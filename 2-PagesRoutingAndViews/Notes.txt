-------------------
MODULE INTRODUCTION 
-------------------
- NUXT allows us to configure our routing very easy 
- Spares you from writing your own route config 

-------------------
FROM FOLDERS TO ROUTES 
-------------------
- You can create the same structure as the route config without writing an 
  actual config file. 

APPROACH: 
- Create top level URLs by naming the .vue file what you want 
    EXAMPLE: pages/users.vue --> '/users' 
- Create pages/index.vue file --> Starting component for '/' route
- Create subfolders for other routes 
    - pages/products/index.vue
    - pages/products/_id/index.vue 


-------------------
CREATING A ROUTE WITH A DYNAMIC PATH 
-------------------
- How do we create a route with a dynamic path? 

FILE NAME APPROACH: 
- Use "_" character as a prefix 
    EXAMPLE: pages/_id.vue --> '/1', '/2', etc 
    EXAMPLE 2: pages/users/_id.vue --> '/users/1', '/users/2', etc. 
- With the File name approach: 
    - Neighboring files won't need to provide the parameter 
- With the nested folder approach:
    - The dynamic param is ALWAYS required in the URL path.

ACCESSING ROUTE PARAMS:
- All of the regular route data is injected automatically into the component 
  from VueJS. 
- Behind the scenes Nuxt is using vue-router as normal. Its just creating 
  the config for you. 
    - Therefore, in the component template you can access $route.params as normal 



-------------------
ADDING LINKS AND NAVIGATING AROUND 
-------------------
- You can add normal anchor tags on the components but this
  will cause a page reload. 
- Instead you should use vue-router links. 
    - <router-link to=""></router-link>
- Can also use nuxt-links 
    - Nuxt links come with transition animations 
    - <nuxt-link to=""></nuxt-link>
- Can navigate programmatically the same as you do 
  in regular Vue.
    - Use this.$router.push('<relativeURL>');


-------------------
ASSIGNMENT 1: PAGES AND ROUTING 
-------------------
1) Create two routes:
    /products and /products/:pid 
2) Add a button to the main page. The button should 
   navigate programmatically to /products 
3) Add two links to the /products page. 
    - Links should go to /products/1 and /products/2
4) Output the product id in on the /products/:pid page


-------------------
VALIDATING PARAMETERS 
-------------------
NUXT PAGE COMPONENTS: 
- Page components get special properties in the Vue instance.
    - This is in addition to the default Vue instance properties 
- One additional property: 'validate' 
    - Nuxt gives you access to this which allows you to 
    build-in URL parameter validation 

VueInstance.validate({params, store, query}):
    - Params on the object passed has the route params 
    - This function should return true upon successful 
      validation and false when failing. 
    - If validate returns false the route will not load. 


-------------------
CREATING NESTED ROUTES 
-------------------
- Load content from one page into another (like partials)

HOW TO DO THIS:
- Create a route in pages/
    EXAMPLE: pages/nested.vue
- Create a folder in pages/ with the same name as the route 
    - This folder will be treated as the "child folder"
        - Any components in here will be accessible to 
        the main route via the nuxt-child tag 
    EXAMPLE: 
        pages/nested.vue 
        pages/nested/index.vue
- Use nuxt-child tag in the main route (similar to router-view)
    - Like router-view this can take a name or not 
    - If you DONT use a name it will load the index.vue 
    of the child folder by default. 
- In the child index you can then load in other children 
  dynamically by using the same pattern just deeper in the 
  directory tree. 
    EXAMPLE: 
        pages/nested.vue 
        pages/nested/index.vue
        pages/nested/another.vue 
        pages/nested/another/index.vue 
        
        URL: /nested 
        - This will load nested which loads its child index 

        URL: /nested/another 
        - This will load nested 
        - Nested will ignore its own index.vue and 
          load in another.vue 
        - Another (needs nuxt-child tag) loads its child index 


-------------------
LAYOUTS, PAGES, & COMPONENTS  
-------------------
LAYOUTS: 
- The layout is the main wrapping element on the page 
- You have a layout in Nuxt Apps 
    - And every page is loaded into that layout 
    - This allows a shared functionality system between pages and shared styles 

PAGES: 
- Pages can be children of other pages. 
- Otherwise are simply Vue components 



-------------------
ADDING A NEW LAYOUT 
-------------------
- Go to layouts/default.vue 
    - This file is the default wrapper for all other pages. 
    - This file uses the <nuxt /> component 
    - All this component does is load in the Nuxt app at this point. 
    - This is simply a normal Vue component 
    - You can put default/global styling for the site on this layout file. 
- CREATING A SECOND LAYOUT: 
    - In the same directory just create a new .vue file 
    - Be sure to use the <nuxt /> component as it is used in the default layout 
    
    - USING A DIFFERENT LAYOUT:
        - In the page where you want to use the new layout:
            - On the Vue instance set the 'layout' property 
            - This is a property injected into each page instance via Nuxt 
        - EXAMPLE: 
        // <nameOfLayout> should match the name of the .vue file (<nameOfLayout>.vue)
        export default {
            data() {
                return {...}
            },
            layout: '<nameOfLayout>'
        }


-------------------
ADDING A DEFAULT ERROR PAGE 
-------------------
- There is another specially-named layout (aside from default.vue)
    - This is called error.vue 

- You can use error.vue to load whenever the vue application throws an error. 
    - Use it as a normal layout file. 



-------------------
WORKING WITH "NORMAL" COMPONENTS 
-------------------
- You can import components into pages by using this path: 
    '~/components/<nameOfComponent>.vue'
    - When working in the Nuxt environment the ~ sign points to the 
      root folder of the project. 
        - You can also use the @ symbol which does the same thing as ~
- Otherwise using Components is virtually the same as Vanilla Vue.js 
    - Just put all of the component files into the /components folder. 



-------------------
STYLING NUXT APPS  
-------------------
- You can add styling directly to the page. 
- Any styles on a page should be scoped to that page as appropriate. 
- You can add non-scoped styles to the /assets directory 
    1) Typically you would create /assets/styles/main.css here 
        - the names here don't matter really as long as its inside /assets 
    2) Go to nuxt.config.js file and go to the 'css:[]' property 
        - This is an array of paths that should be loaded into the 
          final application build. 
        - EXAMPLE: css: ['~/assets/styles/main.css']
        - Now every page will load these global styles 
